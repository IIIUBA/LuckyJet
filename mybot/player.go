package mybot

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func showPlayerStats(chatID int64) {
	stateMu.RLock()
	defer stateMu.RUnlock()

	session, exists := gameState[chatID]
	if !exists {
		sendMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
		return
	}

	stats := fmt.Sprintf("üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"+
		"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: %d\n"+
		"–í–∞—à –±–∞–ª–∞–Ω—Å: %d\n"+
		"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—É–Ω–¥–æ–≤: %d\n"+
		"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %v",
		session.Bet,
		session.Balance,
		inactiveRoundLimit-session.InactiveRounds,
		session.Notifications)

	sendMessage(chatID, stats)
}

func toggleNotifications(chatID int64) {
	stateMu.Lock()
	defer stateMu.Unlock()

	session, exists := gameState[chatID]
	if !exists {
		session = &PlayerSession{
			MessageIDs:    make([]int, 0, maxMessagesToKeep),
			Notifications: true,
		}
		gameState[chatID] = session
	}

	session.Notifications = !session.Notifications
	status := "–≤–∫–ª—é—á–µ–Ω—ã"
	if !session.Notifications {
		status = "–≤—ã–∫–ª—é—á–µ–Ω—ã"
	}
	sendMessage(chatID, fmt.Sprintf("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è %s.", status))
}

func HandleCallback(callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID

	switch callback.Data {
	case "bet / 2":
		handleHalfBet(chatID)
	case "bet":
		handleRepeatBet(chatID)
	case "bet * 2":
		handleDoubleBet(chatID)
	case "cashout":
		cashOut(chatID)
	default:
		if strings.HasPrefix(callback.Data, "bet_") {
			handleFixedBet(chatID, callback.Data)
		} else {
			sendMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
		}
	}

	callbackCfg := tgbotapi.NewCallback(callback.ID, "")
	if _, err := Bot.Request(callbackCfg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: %v", err)
	}
}

func HandleMessage(message *tgbotapi.Message) {
	if message.IsCommand() {
		handleCommand(message)
		return
	}

	
	if !globalGameState.JoiningAllowed {
		sendMessage(message.Chat.ID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞.")
		return
	}

	bet, err := strconv.Atoi(message.Text)
	if err != nil || bet < minBet || bet > maxBet {
		sendMessage(message.Chat.ID, fmt.Sprintf("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É –æ—Ç %d –¥–æ %d.", minBet, maxBet))
		return
	}

	placeBet(message.Chat.ID, bet)
}

func handleCommand(message *tgbotapi.Message) {
	switch message.Command() {
	case "start":
		handleStart(message)
	case "help":
		sendHelp(message.Chat.ID)
	case "stats":
		showPlayerStats(message.Chat.ID)
	case "toggle_notifications":
		toggleNotifications(message.Chat.ID)
	case "bet":
		handleBetCommand(message)
	default:
		sendMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
	}
}

func placeBet(chatID int64, betAmount int) {
	stateMu.Lock()
	defer stateMu.Unlock()

	session, exists := gameState[chatID]
	if !exists {
		session = &PlayerSession{
			MessageIDs:    make([]int, 0, maxMessagesToKeep),
			Notifications: true,
			Balance:       initialBalance,
		}
		gameState[chatID] = session
	}

	if betAmount < minBet || betAmount > maxBet {
		sendMessage(chatID, fmt.Sprintf("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É %d –∏ %d.", minBet, maxBet))
		return
	}

	if session.Balance < betAmount {
		sendMessage(chatID, fmt.Sprintf("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: %d", session.Balance))
		return
	}

	if session.Bet > 0 {
		session.Balance += session.Bet
		globalGameState.TotalBets -= session.Bet
		globalGameState.ActivePlayers--
	}

	session.Balance -= betAmount
	session.Bet = betAmount
	session.CashedOut = false
	session.Multiplier = initialMultiplier
	session.InactiveRounds = 0
	globalGameState.TotalBets += betAmount
	globalGameState.ActivePlayers++

	msg := fmt.Sprintf("–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ %d –ø—Ä–∏–Ω—è—Ç–∞. –í–∞—à –±–∞–ª–∞–Ω—Å: %d. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞!", betAmount, session.Balance)
	sendMessage(chatID, msg)

	updatePlayerMessage(chatID, session)
}

func handleBetCommand(message *tgbotapi.Message) {
	args := message.CommandArguments()
	if args == "" {
		text := "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: 100"
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		msg.ReplyMarkup = createBetKeyboard()
		Bot.Send(msg)
		return
	}

	bet, err := strconv.Atoi(args)
	if err != nil {
		sendMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
		return
	}

	placeBet(message.Chat.ID, bet)
}

func handleFixedBet(chatID int64, callbackData string) {
	betAmount, err := strconv.Atoi(strings.TrimPrefix(callbackData, "bet_"))
	if err != nil {
		sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–∫–∏.")
		return
	}

	placeBet(chatID, betAmount)
}

func handleHalfBet(chatID int64) {
	stateMu.RLock()
	session, exists := gameState[chatID]
	stateMu.RUnlock()

	if !exists || session.Bet == 0 {
		sendMessage(chatID, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å —Å—Ç–∞–≤–∫—É. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É.")
		return
	}

	newBet := session.Bet / 2
	if newBet < minBet {
		sendMessage(chatID, fmt.Sprintf("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ %d. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É.", minBet))
		return
	}

	placeBet(chatID, newBet)
}

func handleRepeatBet(chatID int64) {
	stateMu.RLock()
	session, exists := gameState[chatID]
	stateMu.RUnlock()

	if !exists || session.Bet == 0 {
		sendMessage(chatID, "–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç–∞–≤–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞. –°–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É.")
		return
	}

	placeBet(chatID, session.Bet)
}

func handleDoubleBet(chatID int64) {
	stateMu.RLock()
	session, exists := gameState[chatID]
	stateMu.RUnlock()

	if !exists || session.Bet == 0 {
		sendMessage(chatID, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–≤–æ–∏—Ç—å —Å—Ç–∞–≤–∫—É. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É.")
		return
	}

	newBet := session.Bet * 2
	if newBet > maxBet {
		sendMessage(chatID, fmt.Sprintf("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ %d. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É.", maxBet))
		return
	}

	placeBet(chatID, newBet)
}

func updatePlayerMessage(chatID int64, session *PlayerSession) {
	text := fmt.Sprintf("–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: %d\n–í–∞—à –±–∞–ª–∞–Ω—Å: %d", session.Bet, session.Balance)

	if session.LastMessageID == 0 {
		msg := tgbotapi.NewMessage(chatID, text)
		sentMsg, err := Bot.Send(msg)
		if err != nil {
			log.Printf("Error sending new message: %v", err)
			return
		}
		session.LastMessageID = sentMsg.MessageID
	} else {
		msg := tgbotapi.NewEditMessageText(chatID, session.LastMessageID, text)

		_, err := Bot.Send(msg)
		if err != nil {
			if strings.Contains(err.Error(), "message to edit not found") {
				newMsg := tgbotapi.NewMessage(chatID, text)
				sentMsg, err := Bot.Send(newMsg)
				if err != nil {
					log.Printf("Error sending new message: %v", err)
					return
				}
				session.LastMessageID = sentMsg.MessageID
			} else {
				log.Printf("Error updating message: %v", err)
			}
		}
	}
}
